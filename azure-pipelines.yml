name: $(Build.SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger: [ master ]
pool:
  vmImage: 'Ubuntu 16.04'

# Variables to use in build tasks
variables:
  serviceConnectionAzureSubscription: nameOfTheServiceConnection # replace with Azure DevOps Azure ARM service connection name
  keyVaultName: nameOfKeyVault # replace with name of KeyVault used to store CI/CD pipeline secrets
  secretsFilter: 'CustodianBuildServicePrincipal,AzureDevOpsApiToken' # replace with name of secret or * for all secrets
  policiesFilePath: policies/policies.yml # replace with name of yml file containing the policies that need to be validated
  configFilePath: policies/config.json # replace with path to policy config file if not default
  policyFilePath: policies/policies.build.json # replace with path to policy file if not default
  outputPath: output # replace with path for Custodian policy run output
  repositoryId: idOfTheRepository # replace with the id of the repository, see Project Settings -> Repositories -> Select repo and look at URL
  cloudCustodianCommit: 6186dc6637bead5696eda7e188b67cde7a866cde # Cloud Custodian commit to use
  validatePolicyChangesOnly: true

# Build tasks
steps:
  # Set Python Version
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'

  # Fetch Key Vault Secrets
  - task: AzureKeyVault@1
    displayName: 'Download Azure Key Vault Secrets'
    inputs:
      azureSubscription: $(serviceConnectionAzureSubscription)
      keyVaultName: $(keyVaultName)
      secretsFilter: $(secretsFilter)

  # Update python tools
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Update python pip tools'

  # Install libgit2 for policystream.py
  - script: sudo apt-get update && sudo apt-get -y install libgit2-dev
    displayName: 'Install libgit2'

  # Install dependencies for policy stream
  - script: pip install -r requirements.txt
    displayName: 'Install pip dependencies'

  # Install Cloud Custodian and c7n_azure
  - script: mkdir -p $AGENT_BUILDDIRECTORY/temp &&
      cd $AGENT_BUILDDIRECTORY/temp &&
      git clone https://github.com/capitalone/cloud-custodian -n &&
      cd cloud-custodian &&
      git checkout $(cloudCustodianCommit) &&
      cd .. &&
      pip install ./cloud-custodian &&
      pip install ./cloud-custodian/tools/c7n_azure
    displayName: 'Install Cloud Custodian'

  # Get policystream.py
  - script: wget -O policies/policystream.py 'https://raw.githubusercontent.com/capitalone/cloud-custodian/master/tools/ops/policystream.py' &&
            chmod +x policies/policystream.py
    displayName: 'Get policystream script'

  # Run policystream.py to get modified policies by default
  - task: PythonScript@0
    displayName: 'Get all custodian policies that have been modified'
    inputs:
      scriptSource: 'filePath'
      scriptPath: 'policies/policystream.py'
      arguments: 'diff -r . --source origin/master --target HEAD -o $(policiesFilePath)'
      condition: and(succeeded(), eq(variables['validatePolicyChangesOnly'], true))

  # Gather all policies for validation when validatePolicyChangesOnly is false
  - task: PythonScript@0
    displayName: 'Get all custodian policies'
    inputs:
      scriptSource: 'filePath'
      scriptPath: 'src/build/scripts/get_all_policies.py'
      arguments: '-r . -o $(policiesFilePath)'
      condition: and(succeeded(), eq(variables['validatePolicyChangesOnly'], false))

  # Run Custodian validate
  - script: 'custodian validate $(policiesFilePath)'
    displayName: 'Validate policies'

  # Check if all policies are Function modes
  - task: PythonScript@0
    displayName: 'Validate that policies are in function mode'
    inputs:
      scriptSource: 'filePath'
      scriptPath: "src/build/scripts/validate_policy_mode.py"
      arguments: '-m $(policiesFilePath)'

  # Run Custodian policies in Dryrun mode
  - task: PythonScript@0
    displayName: 'Dry run Custodian policies to get all resources that will be affected'
    inputs:
      scriptSource: 'filePath'
      scriptPath: "src/build/scripts/policy_runner.py"
      arguments: '-c $(configFilePath) -p $(policyFilePath) -s $(CustodianBuildServicePrincipal) -o $(outputPath) --dryrun'

  # Post the output of the dry run to the PR
  - task: PythonScript@0
    displayName: 'Post output to PR'
    inputs:
      scriptSource: 'filePath'
      scriptPath: 'src/build/scripts/post_to_pr.py'
      arguments: '-o "$(System.TeamFoundationCollectionUri)" -p "$(System.TeamProject)" -r "$(repositoryId)" -i "$(System.PullRequest.PullRequestId)" -t "$(AzureDevOpsApiToken)" -d "$(outputPath)" --enable-vso-output'

  # Package c7n python package artifact
  - script: mkdir -p $AGENT_BUILDDIRECTORY/temp/c7n-dist &&
      cd $AGENT_BUILDDIRECTORY/temp/cloud-custodian &&
      python setup.py sdist &&
      mv ./dist/c7n-*.tar.gz $AGENT_BUILDDIRECTORY/temp/c7n-dist/c7n.tar.gz
    displayName: 'Package c7n python package artifact'

  # Package c7n-azure python package artifact
  - script: mkdir -p $AGENT_BUILDDIRECTORY/temp/c7n-dist &&
      cd $AGENT_BUILDDIRECTORY/temp/cloud-custodian/tools/c7n_azure &&
      python setup.py sdist &&
      mv ./dist/c7n_azure*.tar.gz $AGENT_BUILDDIRECTORY/temp/c7n-dist/c7n_azure.tar.gz
    displayName: 'Package c7n-azure python package artifact'

  # Copy Cloud Custodian python packages
  - task: CopyFiles@2
    displayName: 'Copy Cloud Custodian python packages'
    inputs:
      contents: '$AGENT_BUILDDIRECTORY/temp/c7n-dist/**/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  # Copy Cloud Custodian dryrun output files
  - task: CopyFiles@2
    displayName: 'Copy Cloud Custodian dryrun output files'
    inputs:
      contents: 'output/**/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  # Copy configuration files
  - task: CopyFiles@2
    displayName: 'Copy configuration files'
    inputs:
      contents: 'policies/*.json'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  # Copy deployment scripts
  - task: CopyFiles@2
    displayName: 'Copy deployment scripts'
    inputs:
      contents: 'src/build/scripts/policy_runner.py'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true

  # Copy policies
  - task: CopyFiles@2
    displayName: 'Copy policies'
    inputs:
      contents: '$(policiesFilePath)'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  # Publish Build Artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      PathToPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: package
      publishLocation: Container
